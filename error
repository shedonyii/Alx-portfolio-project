const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Enable CORS for cross-origin requests
app.use(cors());

// Parse JSON requests
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/recipebook', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Define a schema for recipes
const recipeSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  ingredients: {
    type: String,
    required: true
  },
  instructions: {
    type: String,
    required: true
  },
  image: String
});

const Recipe = mongoose.model('Recipe', recipeSchema);

// Add a new recipe
app.post('/recipes', async (req, res) => {
  try {
    const { name, ingredients, instructions, image } = req.body;
    if (!name || !ingredients || !instructions) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    const recipe = new Recipe({ name, ingredients, instructions, image });
    await recipe.save();
    res.status(201).json(recipe);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to add recipe' });
  }
});

// Edit a recipe
app.put('/recipes/:recipeId', async (req, res) => {
  try {
    const { name, ingredients, instructions, image } = req.body;
    if (!name || !ingredients || !instructions) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    const recipe = await Recipe.findByIdAndUpdate(req.params.recipeId, { name, ingredients, instructions, image }, { new: true });
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }
    res.json(recipe);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to edit recipe' });
  }
});

// Delete a recipe
app.delete('/recipes/:recipeId', async (req, res) => {
  try {
    const recipe = await Recipe.findByIdAndRemove(req.params.recipeId);
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }
    res.status(204).end();
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to delete recipe' });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
