[22:06, 25/10/2023] shedonyii: const express = require('express');
const mongoose = require('mongoose');

const app = express();
const PORT = 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/recipebook', { useNewUrlParser: true });

// Define a schema for recipes
const recipeSchema = new mongoose.Schema({
    name: String,
    ingredients: String,
    instructions: String,
    image: String
});

const Recipe = mongoose.model('Recipe', recipeSchema);

// Add a new recipe
app.post('/recipes', async (req, res) => {
    try {
        const { name, ingredients, instructions, image } = req.body;
        const recipe = new Recipe({ name, ingredients, instructions, image });
        await recipe.save();
        res.status(201).json(recipe);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add recipe' });
    }
});

// Edit a recipe
app.put('/recipes/:recipeId', async (req, res) => {
    try {
        const { name, ingredients, instructions, image } = req.body;
        const recipe = await Recipe.findByIdAndUpdate(req.params.recipeId, { name, ingredients, instructions, image }, { new: true });
        res.json(recipe);
    } catch (err) {
        res.status(500).json({ error: 'Failed to edit recipe' });
    }
});

// Delete a recipe
app.delete('/recipes/:recipeId', async (req, res) => {
    try {
        await Recipe.findByIdAndRemove(req.params.recipeId);
        res.status(204).end();
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete recipe' });
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
[22:09, 25/10/2023] shedonyii: const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Enable CORS for cross-origin requests
app.use(cors());

// Parse JSON requests
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/recipebook', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Define a schema for recipes
const recipeSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  ingredients: {
    type: String,
    required: true
  },
  instructions: {
    type: String,
    required: true
  },
  image: String
});

const Recipe = mongoose.model('Recipe', recipeSchema);

// Add a new recipe
app.post('/recipes', async (req, res) => {
  try {
    const { name, ingredients, instructions, image } = req.body;
    if (!name || !ingredients || !instructions) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    const recipe = new Recipe({ name, ingredients, instructions, image });
    await recipe.save();
    res.status(201).json(recipe);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to add recipe' });
  }
});

// Edit a recipe
app.put('/recipes/:recipeId', async (req, res) => {
  try {
    const { name, ingredients, instructions, image } = req.body;
    if (!name || !ingredients || !instructions) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    const recipe = await Recipe.findByIdAndUpdate(req.params.recipeId, { name, ingredients, instructions, image }, { new: true });
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }
    res.json(recipe);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to edit recipe' });
  }
});

// Delete a recipe
app.delete('/recipes/:recipeId', async (req, res) => {
  try {
    const recipe = await Recipe.findByIdAndRemove(req.params.recipeId);
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }
    res.status(204).end();
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to delete recipe' });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
[22:11, 25/10/2023] shedonyii: const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3000;

// Enable CORS for cross-origin requests
app.use(cors());

// Parse JSON requests
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/recipebook', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Define a schema for recipes
const recipeSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  ingredients: {
    type: String,
    required: true
  },
  instructions: {
    type: String,
    required: true
  },
  image: String
});

const Recipe = mongoose.model('Recipe', recipeSchema);

// User authentication
const users = [
  { username: 'user1', password: 'password1', role: 'user' },
  { username: 'admin1', password: 'adminpassword1', role: 'admin' }
];

// Secret key for JWT
const jwtSecret = 'your-secret-key';

// Middleware for user authentication
const authenticateUser = (req, res, next) => {
  const token = req.headers.authorization;

  if (!token) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  jwt.verify(token, jwtSecret, (err, user) => {
    if (err) {
      return res.status(401).json({ error: 'Invalid token' });
    }
    req.user = user;
    next();
  });
};

// Authorization middleware for admin access
const authorizeAdmin = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    next();
  } else {
    return res.status(403).json({ error: 'Permission denied' });
  }
};

// Add a new recipe (only authorized users can add)
app.post('/recipes', authenticateUser, (req, res) => {
  // Check if the user is authorized to add
  if (req.user.role === 'user') {
    return res.status(403).json({ error: 'Permission denied' });
  }

  try {
    const { name, ingredients, instructions, image } = req.body;
    if (!name || !ingredients || !instructions) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    const recipe = new Recipe({ name, ingredients, instructions, image });
    recipe.save((err) => {
      if (err) {
        return res.status(500).json({ error: 'Failed to add recipe' });
      }
      res.status(201).json(recipe);
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to add recipe' });
  }
});

// Edit a recipe (only authorized users can edit)
app.put('/recipes/:recipeId', authenticateUser, (req, res) => {
  const { user, params, body } = req;
  const { recipeId } = params;
  
  Recipe.findById(recipeId, (err, recipe) => {
    if (err) {
      return res.status(500).json({ error: 'Failed to edit recipe' });
    }
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }

    // Check if the user is authorized to edit
    if (user.role === 'user') {
      return res.status(403).json({ error: 'Permission denied' });
    }

    const { name, ingredients, instructions, image } = body;
    if (!name || !ingredients || !instructions) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // Update the recipe
    recipe.name = name;
    recipe.ingredients = ingredients;
    recipe.instructions = instructions;
    recipe.image = image;
    recipe.save((err) => {
      if (err) {
        return res.status(500).json({ error: 'Failed to edit recipe' });
      }
      res.json(recipe);
    });
  });
});

// Delete a recipe (only authorized users can delete)
app.delete('/recipes/:recipeId', authenticateUser, (req, res) => {
  const { user, params } = req;
  const { recipeId } = params;

  Recipe.findById(recipeId, (err, recipe) => {
    if (err) {
      return res.status(500).json({ error: 'Failed to delete recipe' });
    }
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }

    // Check if the user is authorized to delete
    if (user.role === 'user') {
      return res.status(403).json({ error: 'Permission denied' });
    }

    recipe.remove((err) => {
      if (err) {
        return res.status(500).json({ error: 'Failed to delete recipe' });
      }
      res.status(204).end();
    });
  });
});

// User login (generates a JWT)
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);

  if (!user) {
    return res.status(401).json({ error: 'Invalid credentials' });
  }

  const token = jwt.sign({ username, role: user.role }, jwtSecret);
  res.json({ token });
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
