const express = require('express');
const mongoose = require('mongoose');

const app = express();
const PORT = 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/recipebook', { useNewUrlParser: true });

// Define a schema for recipes
const recipeSchema = new mongoose.Schema({
    name: String,
    ingredients: String,
    instructions: String,
    image: String
});

const Recipe = mongoose.model('Recipe', recipeSchema);

// Add a new recipe
app.post('/recipes', async (req, res) => {
    try {
        const { name, ingredients, instructions, image } = req.body;
        const recipe = new Recipe({ name, ingredients, instructions, image });
        await recipe.save();
        res.status(201).json(recipe);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add recipe' });
    }
});

// Edit a recipe
app.put('/recipes/:recipeId', async (req, res) => {
    try {
        const { name, ingredients, instructions, image } = req.body;
        const recipe = await Recipe.findByIdAndUpdate(req.params.recipeId, { name, ingredients, instructions, image }, { new: true });
        res.json(recipe);
    } catch (err) {
        res.status(500).json({ error: 'Failed to edit recipe' });
    }
});

// Delete a recipe
app.delete('/recipes/:recipeId', async (req, res) => {
    try {
        await Recipe.findByIdAndRemove(req.params.recipeId);
        res.status(204).end();
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete recipe' });
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
